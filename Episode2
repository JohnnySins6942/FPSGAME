Bullet Behavior: 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BulletBehaviour : MonoBehaviour
{
    public GameObject BulletCollisionFX;
    private void OnCollisionEnter(Collision collision)
    {
        Instantiate(BulletCollisionFX, gameObject.transform.position, gameObject.transform.rotation);
        Destroy(BulletCollisionFX, 4);
        Destroy(gameObject);
    }
}


Gun SCript:

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GunScript : MonoBehaviour
{
    //Gameobjects
    public GameObject Bullet;
    public GameObject BulletExitPos;

    //components
    public Animator GunAnim;
   
    //data
    public float bulletSpeed;
    public float fireRate;
    public float NextTimeToFire = 0f;
    public float reloadTime;

    public int AmmoAmount;
    public int MaxAmmoAmount;

    //bools
    private bool canReload = true;

    private void Start()
    {
        AmmoAmount = MaxAmmoAmount;
    }

    private void Update()
    {
        if(Input.GetKeyDown(KeyCode.Mouse0) && Time.time >= NextTimeToFire && canReload)
        {
            Fire();
            NextTimeToFire = Time.time + 1 / fireRate;
            AmmoAmount--;
        }
        if(Input.GetKeyDown(KeyCode.R) || AmmoAmount <= 0)
        {
            StartCoroutine(Reload());
        }
    }
    void Fire()
    {
        var BULLET = Instantiate(Bullet, BulletExitPos.transform.position, BulletExitPos.transform.rotation);

        var rb = BULLET.GetComponent<Rigidbody>();

        rb.AddForce(-transform.forward * bulletSpeed);

        Destroy(BULLET, 6f);
    }

    IEnumerator Reload()
    {
        if (canReload)
        {
            canReload = false;
            GunAnim.SetBool("IsReloading", true);
            yield return new WaitForSeconds(reloadTime);
            AmmoAmount = MaxAmmoAmount;
            GunAnim.SetBool("IsReloading", false);
            canReload = true;
        }
    }
}
